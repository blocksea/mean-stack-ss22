{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;4CAGM;;yCACA;AAEN,qBAAqB;AACrB,MAAM,MAAM;AAEZ,qCAAqC;AACrC,IAAI,GAAG,CAAC;AAER,gCAAgC;AAChC,IAAI,GAAG,CAAC,eAAQ,IAAI;AAEpB,wBAAwB;AACxB,MAAM,OAAO,KAAK,uBAAuB;AACzC,MAAM,SAAS;AACf,MAAM,iBAAiB;AAEvB,uDAAuD;AACvD,iBAAiB;AACjB,MAAM,QACJ;AACF,eAAe;AACf,uDAAuD;AAEvD,yBAAyB;AACzB,IAAI;AAEJ,uBAAuB;AACvB,kBAAkB;AAClB,IAAI,KAAK,CAAC,WAAW,GAAG,CAAC,OAAO,KAAK,MAAQ;IAC3C,IAAI,SAAS,EAAE;IAEf,uDAAuD;IACvD,iBAAiB;IACjB,SAAS,MAAM,GAAG,UAAU,CAAC,gBAAgB,IAAI,CAAC,CAAC,GAAG,OAAO;IAE7D,eAAe;IACf,uDAAuD;IAEvD,IAAI,IAAI,CAAC;AACX;AAEA,eAAe;AACf,IAAI,KAAK,CAAC,eAAe,GAAG,CAAC,OAAO,KAAK,MAAQ;IAC/C,MAAM,KAAK,IAAI,MAAM,CAAC,EAAE;IACxB,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,gBAAgB,OAAO,CAAC,mCAAS;IAEpE,IAAI,CAAC,QAAQ;QACX,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC;QACtB;IACF,CAAC;IAED,IAAI,IAAI,CAAC;AACX;AAEA,sBAAsB;AACtB,IAAI,KAAK,CAAC,WAAW,IAAI,CAAC,OAAO,KAAK,MAAQ;IAC5C,MAAM,MAAM,IAAI,IAAI;IACpB,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,gBAAgB,SAAS,CAAC;IAC7D,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,KAAK,OAAO,UAAU;IAAC;AAChD;AAEA,kBAAkB;AAClB,IAAI,KAAK,CAAC,eAAe,GAAG,CAAC,OAAO,KAAK,MAAQ;IAC/C,MAAM,KAAK,IAAI,MAAM,CAAC,EAAE;IACxB,MAAM,MAAM,IAAI,IAAI;IACpB,MAAM,SAAS,MAAM,GAClB,UAAU,CAAC,gBACX,SAAS,CAAC;QAAE,KAAK,mCAAS;IAAI,GAAG;QAAE,MAAM;IAAI;IAEhD,IAAI,OAAO,YAAY,IAAI,GAAG;QAC5B,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC;QACtB;IACF,CAAC;IAED,IAAI,IAAI,CAAC,CAAC;AACZ;AAEA,kBAAkB;AAClB,IAAI,KAAK,CAAC,eAAe,MAAM,CAAC,OAAO,KAAK,MAAQ;IAClD,MAAM,KAAK,IAAI,MAAM,CAAC,EAAE;IAExB,uDAAuD;IACvD,iBAAiB;IACjB,MAAM,GAAG,UAAU,CAAC,gBAAgB,SAAS,CAAC;QAAE,KAAK,mCAAS;IAAI;IAClE,eAAe;IACf,uDAAuD;IAEvD,IAAI,IAAI,CAAC,CAAC;AACZ;AAEA,mDAAmD;AACnD,MAAM;AACN,IAAI,OAAO,cACT,IAAI,GAAG,CAAC,KAAK,eAAQ,MAAM,CAAC;KAE5B,IAAI,GAAG,CAAC,KAAK,wBAAM;AAGrB,uCAAuC;AACvC,IAAI,MAAM,CAAC,MAAM,WAAY;IAC3B,QAAQ,GAAG,CAAC,kBAAkB,OAAO;AACvC;AAEA,sBAAsB;AACtB,sCAAY,OAAO,CAAC,OAAO,CAAC,KAAK,SAAW;IAC1C,IAAI,KAAK;QACP,QAAQ,KAAK,CAAC;QACd;IACF,CAAC;IAED,KAAK,OAAO,EAAE,CAAC;IAEf,QAAQ,GAAG,CAAC;AACd","sources":["src/index.js"],"sourcesContent":["const express = require(\"express\");\nconst proxy = require(\"express-http-proxy\");\nconst cors = require(\"cors\");\nconst MongoClient = require(\"mongodb\").MongoClient;\nconst ObjectId = require(\"mongodb\").ObjectId;\n\n// Create Express app\nconst app = express();\n\n// Add CORS to all routes and methods\napp.use(cors());\n\n// Enable parsing of JSON bodies\napp.use(express.json());\n\n// Initialize parameters\nconst port = eval(\"process.env.PORT\") || 3600;\nconst dbName = \"mean_database\";\nconst collectionName = \"people\";\n\n// ----------------------------------------------------\n// TASK 1.1 START\nconst dbUrl =\n  \"mongodb+srv://nxgenuser:nxgenDatabase@cluster0.5ldhe.mongodb.net/coursemapper?retryWrites=true&w=majority\";\n// TASK 1.1 END\n// ----------------------------------------------------\n\n// Create database object\nlet db;\n\n// Define server routes\n// List all people\napp.route(\"/people\").get(async (req, res) => {\n  let people = [];\n\n  // ----------------------------------------------------\n  // TASK 2.1 START\n  people = await db.collection(collectionName).find({}).toArray();\n\n  // TASK 2.1 END\n  // ----------------------------------------------------\n\n  res.json(people);\n});\n\n// Get a person\napp.route(\"/people/:id\").get(async (req, res) => {\n  const id = req.params.id;\n  const result = await db.collection(collectionName).findOne(ObjectId(id));\n\n  if (!result) {\n    res.status(404).json({});\n    return;\n  }\n\n  res.json(result);\n});\n\n// Create a new person\napp.route(\"/people\").post(async (req, res) => {\n  const doc = req.body;\n  const result = await db.collection(collectionName).insertOne(doc);\n  res.status(201).json({ _id: result.insertedId });\n});\n\n// Update a person\napp.route(\"/people/:id\").put(async (req, res) => {\n  const id = req.params.id;\n  const doc = req.body;\n  const result = await db\n    .collection(collectionName)\n    .updateOne({ _id: ObjectId(id) }, { $set: doc });\n\n  if (result.matchedCount == 0) {\n    res.status(404).json({});\n    return;\n  }\n\n  res.json({});\n});\n\n// Delete a person\napp.route(\"/people/:id\").delete(async (req, res) => {\n  const id = req.params.id;\n\n  // ----------------------------------------------------\n  // TASK 3.1 START\n  await db.collection(collectionName).deleteOne({ _id: ObjectId(id) });\n  // TASK 3.1 END\n  // ----------------------------------------------------\n\n  res.json({});\n});\n\n// Reverse proxy or static file server for frontend\nconst env = process.env.NODE_ENV || \"development\";\nif (env == \"production\") {\n  app.use(\"/\", express.static(\"public\"));\n} else {\n  app.use(\"/\", proxy(\"localhost:4200\"));\n}\n\n// Start server and listen for requests\napp.listen(port, function () {\n  console.log(\"Listening on \" + port + \".\");\n});\n\n// Connect to database\nMongoClient.connect(dbUrl, (err, client) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  db = client.db(dbName);\n\n  console.log(\"Connected to database\");\n});\n"],"names":[],"version":3,"file":"main.js.map"}